// pages/components/meeting-center-video/meeting-center-video.js
const AgoraMiniappSDK = require('../../../utils/mini-app-sdk-production.js');
// 测试
const APPID = 'a247df868d144f6dbe956114b4a242d4';

// 江川项目
// const APPID = 'cdfad6ea2173410c9c36f1df1e9c6d72';
Component({
  /**
   * 组件的属性列表
   */
  properties: {

  },

  /**
   * 组件的初始数据
   */
  data: {

    coverSrc: '../../../static/images/full.png',
    fullScreenFlag: false,
    urlRtc: '',
    stremList: [2564, 9528],
    srcTmp: [2564, 9528],
   
  },

  attached() {
    // 在组件实例进入页面节点树时执行
    this._startPlaying()
    this._pusher()
  },


  /**
   * 组件的方法列表
   * 内部私有方法建议以下划线开头
   * triggerEvent 用于触发事件, {}中的内容为返回的对象
   */
  methods: {
    _fullScreenFn(e) {
      console.log(e.currentTarget.dataset.id)
      let ctx = wx.createLivePlayerContext(e.currentTarget.dataset.id, this)
      if (this.data.fullScreenFlag) {
        // 非全屏状态
        ctx.exitFullScreen({
          success: res => {

          },
          complete: res => {
            this.setData({
              fullScreenFlag: false,
              corverSrc: '../../../static/images/full.png'
            })
          }
        })

      } else {

        // 全屏状态
        ctx.requestFullScreen({
          direction: 90,
          success: res => {

          },
          fail: res => {


          },
          complete: res => {
            this.setData({
              fullScreenFlag: true,
              corverSrc: '../../../static/images/full.png'
            })
          }

        })
      }



    },
    /* 查看详情 */
    _startPlaying() {
      let client = new AgoraMiniappSDK.Client();
      // 初始化客户端
      client.init(APPID, res => {
        // 创建视频流 chancl roomid uid
        client.join(null, '2556', null, res => {

          client.on("stream-added", e => {
            let uid = e.uid;
            console.log('你是uid'+uid)
            let index = this.data.stremList.indexOf(uid);
            if (index !== -1) {
              
              client.subscribe(uid, url => {

                console.log(index)
                this.data.srcTmp.splice(index,1,url)
              setTimeout(() => {
                this.setData({
                  srcTmp: this.data.srcTmp
                })

                console.log(this.data.srcTmp)
              },50)

              })
            }



          })
        })
      })

    },
    // 推送到远端
    _pusher() {
      let client = new AgoraMiniappSDK.Client();
      client.init(APPID, res => {
        console.log(res)

        client.join(null, '2556', 2564, e => {
          client.publish(url => {

            this.setData({
              urlRtc: url
            })
          }, err => {
            console.log('错误了' + err)
          })
        })
      })

    }
  }
})